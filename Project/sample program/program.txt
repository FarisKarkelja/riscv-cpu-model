.data 
value: .word 28

.text
.globl main
main:
    addi x1, x0, 14  # x1 = x0 + 14 => x1 = 14
    addi x2, x0, 6  # x2 = x0 + 6 => x2 = 6
    sub x3, x1, x2  # x3 = x1 - x2 => x3 = 14 - 6 = 8
    
    addi x4, x1, -13 # x4 = x1 - 13 => x4 = 1
    addi x5, x2, -6 # x5 = x2 - 6 => x5 = 0
    or x6, x4, x5 # x6 = x4 OR x5 => x6 = 1
    
    la x10, value # load the address of value into register x10
    lw x11, 0(x10) # load a word from memory to register x11
    
    bne x1, x2, label # branch if x1 is not equal to x2
    label:
    xor x12, x1, x2 # if not equal, perform xor between x1 and x2

    li a7, 10 # Set a7 to the ecall code for termination
    ecall # System call to exit the program